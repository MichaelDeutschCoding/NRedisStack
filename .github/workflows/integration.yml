name: Integration Tests

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
    branches:
      - master
  pull_request:
  schedule:
    - cron: "0 1 * * *"

env:
  redis_stack_version: 6.2.2-v5

jobs:

  build_and_test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: .NET Core 6
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: .NET Core 7
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '7.0.x'
      - name: run redis-stack-server docker
        run: docker run -p 6379:6379 -d redis/redis-stack-server:edge
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: |
          dotnet build --no-restore /p:ContinuousIntegrationBuild=true
      - name: Test
        run: dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          verbose: true

      - name: determine if in fork
        id: iamafork
        run: |
          amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
          echo "am I fork: ${amfork}"
          echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

      - name: Import the GPG key
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import

      - name: get gpg_keygrip
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        id: get_gpg_keygrip
        run: |
          keygrip=`gpg -k --with-keygrip |sed -n 5p|cut -d '=' -f 2-2`
          echo "GPG_KEYGRIP=$keygrip" >> $GITHUB_OUTPUT

      - name: Build the package
        run: |
          dotnet pack -c release --output .

      - name: Sign the package
        if: steps.iamafork.outputs.IAMAFORK == 'false'
        run: |
            echo allow-preset-passphrase > ~/.gnupg/gpg-agent.conf
            gpg-connect-agent reloadagent /bye
            /usr/lib/gnupg/gpg-preset-passphrase -P '${{ secrets.GPG_PASSWORD }}' -c --preset ${{ steps.get_gpg_keygrip.outputs.GPG_KEYGRIP }}
            gpg --detach-sign NRedisStack*.nupkg


